import os

from skiros2_skill.core.skill import SkillDescription, SkillBase, Sequential
from skiros2_common.core.primitive import PrimitiveBase
from skiros2_common.core.world_element import Element
from skiros2_common.core.params import ParamTypes

import rospy
from std_msgs.msg import Int32
import tf2_ros

import numpy as np
from scipy.spatial.transform import Rotation
from .object_pose_skill import make_pose_stamped, unpack_pose_stamped

class GoToPosition(SkillDescription):
    def createDescription(self):
        self.addParam('Object', Element('skiros:Product'), ParamTypes.Required)
        self.addParam('InitialLocation', Element('scalable:Workstation'), ParamTypes.Required)
        self.addParam('TargetLocation', Element('scalable:Workstation'), ParamTypes.Required)

class go_to_position(SkillBase):

    def createDescription(self):
        self.setDescription(GoToPosition(), self.__class__.__name__)

    def expand(self, skill):
        skill.setProcessor(Sequential())
        skill(

            self.skill('JPDrive', 'jp_drive', remap={'TargetLocation': 'TargetLocation'}),
            #self.skill('Arm', 'aruco_marker', remap={'Object': 'ArUco marker'}),
            # switch to cs tomorrow
            self.skill('ArucoEstimation', 'aruco_marker', remap={'Object': 'Object'}),
            self.skill('SaveCoordinates', 'save_coordinates', remap={'Object': 'Object'}),
            self.skill('EvaluateNavigation', 'evaluate_navigation'),
            self.skill('JPDrive', 'jp_drive', remap={'TargetLocation': 'InitialLocation'}),
            
        )

class SaveCoordinates(SkillDescription):
    def createDescription(self):
        self.addParam('Object', Element('skiros:Product'), ParamTypes.Required)

class save_coordinates(PrimitiveBase):

    def createDescription(self):
        self.setDescription(SaveCoordinates(), self.__class__.__name__)

    def onInit(self):
        return True

    def onPreempt(self):
        return True

    def onStart(self):
        return True

    def execute(self):
        pass

    def onEnd(self):
        return True

class CalculateNavigation(SkillDescription):
    def createDescription(self):
        pass

class calculate_mean(PrimitiveBase):

    def createDescription(self):
        self.setDescription(CalculateNavigation(), self.__class__.__name__)

class evaluate_navigation(PrimitiveBase):

    def createDescription(self):
        self.setDescription(CalculateNavigation(), self.__class__.__name__)


class DetectAndSave(SkillDescription):
    
    def createDescription(self):
        self.addParam('Camera', Element('skiros:DepthCamera'), ParamTypes.Required)
        self.addParam('Object', Element('skiros:Product'), ParamTypes.Required)
    

class detect_and_save(SkillBase):

    def createDescription(self):
        self.setDescription(CalculateNavigation(), self.__class__.__name__)
    
    def expand(self, skill):
        skill.setProcessor(Sequential())
        skill(
            self.skill('ArucoEstimation', 'aruco_marker', remap={'Object': 'Object','Camera': 'Camera'}),
            self.skill('SaveCoordinates', 'save_coordinates', remap={'Object': 'Object'}),
        )